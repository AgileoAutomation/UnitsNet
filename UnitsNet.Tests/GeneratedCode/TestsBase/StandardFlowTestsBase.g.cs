//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of StandardFlow.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class StandardFlowTestsBase
    {
        protected abstract double StandardCubicCentimetersPerMinuteInOneStandardCubicMeterPerSecond { get; }
        protected abstract double StandardCubicCentimetersPerSecondInOneStandardCubicMeterPerSecond { get; }
        protected abstract double StandardCubicDecimetersPerMinuteInOneStandardCubicMeterPerSecond { get; }
        protected abstract double StandardCubicFeetPerDayInOneStandardCubicMeterPerSecond { get; }
        protected abstract double StandardCubicFeetPerHourInOneStandardCubicMeterPerSecond { get; }
        protected abstract double StandardCubicFeetPerMinuteInOneStandardCubicMeterPerSecond { get; }
        protected abstract double StandardCubicFeetPerSecondInOneStandardCubicMeterPerSecond { get; }
        protected abstract double StandardCubicMetersPerDayInOneStandardCubicMeterPerSecond { get; }
        protected abstract double StandardCubicMetersPerHourInOneStandardCubicMeterPerSecond { get; }
        protected abstract double StandardCubicMetersPerMinuteInOneStandardCubicMeterPerSecond { get; }
        protected abstract double StandardCubicMetersPerSecondInOneStandardCubicMeterPerSecond { get; }
        protected abstract double StandardCubicMillimetersPerSecondInOneStandardCubicMeterPerSecond { get; }
        protected abstract double StandardCubicYardsPerDayInOneStandardCubicMeterPerSecond { get; }
        protected abstract double StandardCubicYardsPerHourInOneStandardCubicMeterPerSecond { get; }
        protected abstract double StandardCubicYardsPerMinuteInOneStandardCubicMeterPerSecond { get; }
        protected abstract double StandardCubicYardsPerSecondInOneStandardCubicMeterPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double StandardCubicCentimetersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double StandardCubicCentimetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double StandardCubicDecimetersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double StandardCubicFeetPerDayTolerance { get { return 1e-5; } }
        protected virtual double StandardCubicFeetPerHourTolerance { get { return 1e-5; } }
        protected virtual double StandardCubicFeetPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double StandardCubicFeetPerSecondTolerance { get { return 1e-5; } }
        protected virtual double StandardCubicMetersPerDayTolerance { get { return 1e-5; } }
        protected virtual double StandardCubicMetersPerHourTolerance { get { return 1e-5; } }
        protected virtual double StandardCubicMetersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double StandardCubicMetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double StandardCubicMillimetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double StandardCubicYardsPerDayTolerance { get { return 1e-5; } }
        protected virtual double StandardCubicYardsPerHourTolerance { get { return 1e-5; } }
        protected virtual double StandardCubicYardsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double StandardCubicYardsPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new StandardFlow((double)0.0, StandardFlowUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new StandardFlow();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(StandardFlowUnit.StandardCubicMeterPerSecond, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_CreateQuantityAndAffectInfinityValue()
        {
            var positiveInfinityQuantity = new StandardFlow(double.PositiveInfinity, StandardFlowUnit.StandardCubicMeterPerSecond);
            var negativeInfinityQuantity = new StandardFlow(double.NegativeInfinity, StandardFlowUnit.StandardCubicMeterPerSecond);

            Assert.True(double.IsPositiveInfinity(positiveInfinityQuantity.Value));
            Assert.True(double.IsNegativeInfinity(negativeInfinityQuantity.Value));
        }

        [Fact]
        public void Ctor_WithNaNValue_CreateQuantityAndAffectNaNValue()
        {
            var nanQuantity = new StandardFlow(double.NaN, StandardFlowUnit.StandardCubicMeterPerSecond);
            Assert.True(double.IsNaN(nanQuantity.Value));
        }

        [Fact]
        public void StandardFlow_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new StandardFlow(1, StandardFlowUnit.StandardCubicMeterPerSecond);

            QuantityInfo<StandardFlowUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(StandardFlow.Zero, quantityInfo.Zero);
            Assert.Equal("StandardFlow", quantityInfo.Name);
            Assert.Equal(QuantityType.StandardFlow, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<StandardFlowUnit>().Except(new[] {StandardFlowUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
#pragma warning disable 618
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
#pragma warning restore 618
        }

        [Fact]
        public void StandardCubicMeterPerSecondToStandardFlowUnits()
        {
            StandardFlow standardcubicmeterpersecond = StandardFlow.FromStandardCubicMetersPerSecond(1);
            AssertEx.EqualTolerance(StandardCubicCentimetersPerMinuteInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.StandardCubicCentimetersPerMinute, StandardCubicCentimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(StandardCubicCentimetersPerSecondInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.StandardCubicCentimetersPerSecond, StandardCubicCentimetersPerSecondTolerance);
            AssertEx.EqualTolerance(StandardCubicDecimetersPerMinuteInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.StandardCubicDecimetersPerMinute, StandardCubicDecimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(StandardCubicFeetPerDayInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.StandardCubicFeetPerDay, StandardCubicFeetPerDayTolerance);
            AssertEx.EqualTolerance(StandardCubicFeetPerHourInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.StandardCubicFeetPerHour, StandardCubicFeetPerHourTolerance);
            AssertEx.EqualTolerance(StandardCubicFeetPerMinuteInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.StandardCubicFeetPerMinute, StandardCubicFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(StandardCubicFeetPerSecondInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.StandardCubicFeetPerSecond, StandardCubicFeetPerSecondTolerance);
            AssertEx.EqualTolerance(StandardCubicMetersPerDayInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.StandardCubicMetersPerDay, StandardCubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(StandardCubicMetersPerHourInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.StandardCubicMetersPerHour, StandardCubicMetersPerHourTolerance);
            AssertEx.EqualTolerance(StandardCubicMetersPerMinuteInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.StandardCubicMetersPerMinute, StandardCubicMetersPerMinuteTolerance);
            AssertEx.EqualTolerance(StandardCubicMetersPerSecondInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.StandardCubicMetersPerSecond, StandardCubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(StandardCubicMillimetersPerSecondInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.StandardCubicMillimetersPerSecond, StandardCubicMillimetersPerSecondTolerance);
            AssertEx.EqualTolerance(StandardCubicYardsPerDayInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.StandardCubicYardsPerDay, StandardCubicYardsPerDayTolerance);
            AssertEx.EqualTolerance(StandardCubicYardsPerHourInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.StandardCubicYardsPerHour, StandardCubicYardsPerHourTolerance);
            AssertEx.EqualTolerance(StandardCubicYardsPerMinuteInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.StandardCubicYardsPerMinute, StandardCubicYardsPerMinuteTolerance);
            AssertEx.EqualTolerance(StandardCubicYardsPerSecondInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.StandardCubicYardsPerSecond, StandardCubicYardsPerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = StandardFlow.From(1, StandardFlowUnit.StandardCubicCentimeterPerMinute);
            AssertEx.EqualTolerance(1, quantity00.StandardCubicCentimetersPerMinute, StandardCubicCentimetersPerMinuteTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicCentimeterPerMinute, quantity00.Unit);

            var quantity01 = StandardFlow.From(1, StandardFlowUnit.StandardCubicCentimeterPerSecond);
            AssertEx.EqualTolerance(1, quantity01.StandardCubicCentimetersPerSecond, StandardCubicCentimetersPerSecondTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicCentimeterPerSecond, quantity01.Unit);

            var quantity02 = StandardFlow.From(1, StandardFlowUnit.StandardCubicDecimeterPerMinute);
            AssertEx.EqualTolerance(1, quantity02.StandardCubicDecimetersPerMinute, StandardCubicDecimetersPerMinuteTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicDecimeterPerMinute, quantity02.Unit);

            var quantity03 = StandardFlow.From(1, StandardFlowUnit.StandardCubicFootPerDay);
            AssertEx.EqualTolerance(1, quantity03.StandardCubicFeetPerDay, StandardCubicFeetPerDayTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicFootPerDay, quantity03.Unit);

            var quantity04 = StandardFlow.From(1, StandardFlowUnit.StandardCubicFootPerHour);
            AssertEx.EqualTolerance(1, quantity04.StandardCubicFeetPerHour, StandardCubicFeetPerHourTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicFootPerHour, quantity04.Unit);

            var quantity05 = StandardFlow.From(1, StandardFlowUnit.StandardCubicFootPerMinute);
            AssertEx.EqualTolerance(1, quantity05.StandardCubicFeetPerMinute, StandardCubicFeetPerMinuteTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicFootPerMinute, quantity05.Unit);

            var quantity06 = StandardFlow.From(1, StandardFlowUnit.StandardCubicFootPerSecond);
            AssertEx.EqualTolerance(1, quantity06.StandardCubicFeetPerSecond, StandardCubicFeetPerSecondTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicFootPerSecond, quantity06.Unit);

            var quantity07 = StandardFlow.From(1, StandardFlowUnit.StandardCubicMeterPerDay);
            AssertEx.EqualTolerance(1, quantity07.StandardCubicMetersPerDay, StandardCubicMetersPerDayTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicMeterPerDay, quantity07.Unit);

            var quantity08 = StandardFlow.From(1, StandardFlowUnit.StandardCubicMeterPerHour);
            AssertEx.EqualTolerance(1, quantity08.StandardCubicMetersPerHour, StandardCubicMetersPerHourTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicMeterPerHour, quantity08.Unit);

            var quantity09 = StandardFlow.From(1, StandardFlowUnit.StandardCubicMeterPerMinute);
            AssertEx.EqualTolerance(1, quantity09.StandardCubicMetersPerMinute, StandardCubicMetersPerMinuteTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicMeterPerMinute, quantity09.Unit);

            var quantity10 = StandardFlow.From(1, StandardFlowUnit.StandardCubicMeterPerSecond);
            AssertEx.EqualTolerance(1, quantity10.StandardCubicMetersPerSecond, StandardCubicMetersPerSecondTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicMeterPerSecond, quantity10.Unit);

            var quantity11 = StandardFlow.From(1, StandardFlowUnit.StandardCubicMillimeterPerSecond);
            AssertEx.EqualTolerance(1, quantity11.StandardCubicMillimetersPerSecond, StandardCubicMillimetersPerSecondTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicMillimeterPerSecond, quantity11.Unit);

            var quantity12 = StandardFlow.From(1, StandardFlowUnit.StandardCubicYardPerDay);
            AssertEx.EqualTolerance(1, quantity12.StandardCubicYardsPerDay, StandardCubicYardsPerDayTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicYardPerDay, quantity12.Unit);

            var quantity13 = StandardFlow.From(1, StandardFlowUnit.StandardCubicYardPerHour);
            AssertEx.EqualTolerance(1, quantity13.StandardCubicYardsPerHour, StandardCubicYardsPerHourTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicYardPerHour, quantity13.Unit);

            var quantity14 = StandardFlow.From(1, StandardFlowUnit.StandardCubicYardPerMinute);
            AssertEx.EqualTolerance(1, quantity14.StandardCubicYardsPerMinute, StandardCubicYardsPerMinuteTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicYardPerMinute, quantity14.Unit);

            var quantity15 = StandardFlow.From(1, StandardFlowUnit.StandardCubicYardPerSecond);
            AssertEx.EqualTolerance(1, quantity15.StandardCubicYardsPerSecond, StandardCubicYardsPerSecondTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicYardPerSecond, quantity15.Unit);

        }

        [Fact]
        public void FromStandardCubicMetersPerSecond_WithInfinityValue_CreateQuantityAndAffectInfinityValue()
        {
            var positiveInfinityQuantity = StandardFlow.FromStandardCubicMetersPerSecond(double.PositiveInfinity);
            var negativeInfinityQuantity = StandardFlow.FromStandardCubicMetersPerSecond(double.NegativeInfinity);

            Assert.True(double.IsPositiveInfinity(positiveInfinityQuantity.Value));
            Assert.True(double.IsNegativeInfinity(negativeInfinityQuantity.Value));
        }

        [Fact]
        public void FromStandardCubicMetersPerSecond_WithNanValue_CreateQuantityAndAffectNaNValue()
        {
            var nanQuantity = StandardFlow.FromStandardCubicMetersPerSecond(double.NaN);
            Assert.True(double.IsNaN(nanQuantity.Value));
        }

        [Fact]
        public void As()
        {
            var standardcubicmeterpersecond = StandardFlow.FromStandardCubicMetersPerSecond(1);
            AssertEx.EqualTolerance(StandardCubicCentimetersPerMinuteInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.As(StandardFlowUnit.StandardCubicCentimeterPerMinute), StandardCubicCentimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(StandardCubicCentimetersPerSecondInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.As(StandardFlowUnit.StandardCubicCentimeterPerSecond), StandardCubicCentimetersPerSecondTolerance);
            AssertEx.EqualTolerance(StandardCubicDecimetersPerMinuteInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.As(StandardFlowUnit.StandardCubicDecimeterPerMinute), StandardCubicDecimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(StandardCubicFeetPerDayInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.As(StandardFlowUnit.StandardCubicFootPerDay), StandardCubicFeetPerDayTolerance);
            AssertEx.EqualTolerance(StandardCubicFeetPerHourInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.As(StandardFlowUnit.StandardCubicFootPerHour), StandardCubicFeetPerHourTolerance);
            AssertEx.EqualTolerance(StandardCubicFeetPerMinuteInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.As(StandardFlowUnit.StandardCubicFootPerMinute), StandardCubicFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(StandardCubicFeetPerSecondInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.As(StandardFlowUnit.StandardCubicFootPerSecond), StandardCubicFeetPerSecondTolerance);
            AssertEx.EqualTolerance(StandardCubicMetersPerDayInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.As(StandardFlowUnit.StandardCubicMeterPerDay), StandardCubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(StandardCubicMetersPerHourInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.As(StandardFlowUnit.StandardCubicMeterPerHour), StandardCubicMetersPerHourTolerance);
            AssertEx.EqualTolerance(StandardCubicMetersPerMinuteInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.As(StandardFlowUnit.StandardCubicMeterPerMinute), StandardCubicMetersPerMinuteTolerance);
            AssertEx.EqualTolerance(StandardCubicMetersPerSecondInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.As(StandardFlowUnit.StandardCubicMeterPerSecond), StandardCubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(StandardCubicMillimetersPerSecondInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.As(StandardFlowUnit.StandardCubicMillimeterPerSecond), StandardCubicMillimetersPerSecondTolerance);
            AssertEx.EqualTolerance(StandardCubicYardsPerDayInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.As(StandardFlowUnit.StandardCubicYardPerDay), StandardCubicYardsPerDayTolerance);
            AssertEx.EqualTolerance(StandardCubicYardsPerHourInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.As(StandardFlowUnit.StandardCubicYardPerHour), StandardCubicYardsPerHourTolerance);
            AssertEx.EqualTolerance(StandardCubicYardsPerMinuteInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.As(StandardFlowUnit.StandardCubicYardPerMinute), StandardCubicYardsPerMinuteTolerance);
            AssertEx.EqualTolerance(StandardCubicYardsPerSecondInOneStandardCubicMeterPerSecond, standardcubicmeterpersecond.As(StandardFlowUnit.StandardCubicYardPerSecond), StandardCubicYardsPerSecondTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var standardcubicmeterpersecond = StandardFlow.FromStandardCubicMetersPerSecond(1);

            var standardcubiccentimeterperminuteQuantity = standardcubicmeterpersecond.ToUnit(StandardFlowUnit.StandardCubicCentimeterPerMinute);
            AssertEx.EqualTolerance(StandardCubicCentimetersPerMinuteInOneStandardCubicMeterPerSecond, (double)standardcubiccentimeterperminuteQuantity.Value, StandardCubicCentimetersPerMinuteTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicCentimeterPerMinute, standardcubiccentimeterperminuteQuantity.Unit);

            var standardcubiccentimeterpersecondQuantity = standardcubicmeterpersecond.ToUnit(StandardFlowUnit.StandardCubicCentimeterPerSecond);
            AssertEx.EqualTolerance(StandardCubicCentimetersPerSecondInOneStandardCubicMeterPerSecond, (double)standardcubiccentimeterpersecondQuantity.Value, StandardCubicCentimetersPerSecondTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicCentimeterPerSecond, standardcubiccentimeterpersecondQuantity.Unit);

            var standardcubicdecimeterperminuteQuantity = standardcubicmeterpersecond.ToUnit(StandardFlowUnit.StandardCubicDecimeterPerMinute);
            AssertEx.EqualTolerance(StandardCubicDecimetersPerMinuteInOneStandardCubicMeterPerSecond, (double)standardcubicdecimeterperminuteQuantity.Value, StandardCubicDecimetersPerMinuteTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicDecimeterPerMinute, standardcubicdecimeterperminuteQuantity.Unit);

            var standardcubicfootperdayQuantity = standardcubicmeterpersecond.ToUnit(StandardFlowUnit.StandardCubicFootPerDay);
            AssertEx.EqualTolerance(StandardCubicFeetPerDayInOneStandardCubicMeterPerSecond, (double)standardcubicfootperdayQuantity.Value, StandardCubicFeetPerDayTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicFootPerDay, standardcubicfootperdayQuantity.Unit);

            var standardcubicfootperhourQuantity = standardcubicmeterpersecond.ToUnit(StandardFlowUnit.StandardCubicFootPerHour);
            AssertEx.EqualTolerance(StandardCubicFeetPerHourInOneStandardCubicMeterPerSecond, (double)standardcubicfootperhourQuantity.Value, StandardCubicFeetPerHourTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicFootPerHour, standardcubicfootperhourQuantity.Unit);

            var standardcubicfootperminuteQuantity = standardcubicmeterpersecond.ToUnit(StandardFlowUnit.StandardCubicFootPerMinute);
            AssertEx.EqualTolerance(StandardCubicFeetPerMinuteInOneStandardCubicMeterPerSecond, (double)standardcubicfootperminuteQuantity.Value, StandardCubicFeetPerMinuteTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicFootPerMinute, standardcubicfootperminuteQuantity.Unit);

            var standardcubicfootpersecondQuantity = standardcubicmeterpersecond.ToUnit(StandardFlowUnit.StandardCubicFootPerSecond);
            AssertEx.EqualTolerance(StandardCubicFeetPerSecondInOneStandardCubicMeterPerSecond, (double)standardcubicfootpersecondQuantity.Value, StandardCubicFeetPerSecondTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicFootPerSecond, standardcubicfootpersecondQuantity.Unit);

            var standardcubicmeterperdayQuantity = standardcubicmeterpersecond.ToUnit(StandardFlowUnit.StandardCubicMeterPerDay);
            AssertEx.EqualTolerance(StandardCubicMetersPerDayInOneStandardCubicMeterPerSecond, (double)standardcubicmeterperdayQuantity.Value, StandardCubicMetersPerDayTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicMeterPerDay, standardcubicmeterperdayQuantity.Unit);

            var standardcubicmeterperhourQuantity = standardcubicmeterpersecond.ToUnit(StandardFlowUnit.StandardCubicMeterPerHour);
            AssertEx.EqualTolerance(StandardCubicMetersPerHourInOneStandardCubicMeterPerSecond, (double)standardcubicmeterperhourQuantity.Value, StandardCubicMetersPerHourTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicMeterPerHour, standardcubicmeterperhourQuantity.Unit);

            var standardcubicmeterperminuteQuantity = standardcubicmeterpersecond.ToUnit(StandardFlowUnit.StandardCubicMeterPerMinute);
            AssertEx.EqualTolerance(StandardCubicMetersPerMinuteInOneStandardCubicMeterPerSecond, (double)standardcubicmeterperminuteQuantity.Value, StandardCubicMetersPerMinuteTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicMeterPerMinute, standardcubicmeterperminuteQuantity.Unit);

            var standardcubicmeterpersecondQuantity = standardcubicmeterpersecond.ToUnit(StandardFlowUnit.StandardCubicMeterPerSecond);
            AssertEx.EqualTolerance(StandardCubicMetersPerSecondInOneStandardCubicMeterPerSecond, (double)standardcubicmeterpersecondQuantity.Value, StandardCubicMetersPerSecondTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicMeterPerSecond, standardcubicmeterpersecondQuantity.Unit);

            var standardcubicmillimeterpersecondQuantity = standardcubicmeterpersecond.ToUnit(StandardFlowUnit.StandardCubicMillimeterPerSecond);
            AssertEx.EqualTolerance(StandardCubicMillimetersPerSecondInOneStandardCubicMeterPerSecond, (double)standardcubicmillimeterpersecondQuantity.Value, StandardCubicMillimetersPerSecondTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicMillimeterPerSecond, standardcubicmillimeterpersecondQuantity.Unit);

            var standardcubicyardperdayQuantity = standardcubicmeterpersecond.ToUnit(StandardFlowUnit.StandardCubicYardPerDay);
            AssertEx.EqualTolerance(StandardCubicYardsPerDayInOneStandardCubicMeterPerSecond, (double)standardcubicyardperdayQuantity.Value, StandardCubicYardsPerDayTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicYardPerDay, standardcubicyardperdayQuantity.Unit);

            var standardcubicyardperhourQuantity = standardcubicmeterpersecond.ToUnit(StandardFlowUnit.StandardCubicYardPerHour);
            AssertEx.EqualTolerance(StandardCubicYardsPerHourInOneStandardCubicMeterPerSecond, (double)standardcubicyardperhourQuantity.Value, StandardCubicYardsPerHourTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicYardPerHour, standardcubicyardperhourQuantity.Unit);

            var standardcubicyardperminuteQuantity = standardcubicmeterpersecond.ToUnit(StandardFlowUnit.StandardCubicYardPerMinute);
            AssertEx.EqualTolerance(StandardCubicYardsPerMinuteInOneStandardCubicMeterPerSecond, (double)standardcubicyardperminuteQuantity.Value, StandardCubicYardsPerMinuteTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicYardPerMinute, standardcubicyardperminuteQuantity.Unit);

            var standardcubicyardpersecondQuantity = standardcubicmeterpersecond.ToUnit(StandardFlowUnit.StandardCubicYardPerSecond);
            AssertEx.EqualTolerance(StandardCubicYardsPerSecondInOneStandardCubicMeterPerSecond, (double)standardcubicyardpersecondQuantity.Value, StandardCubicYardsPerSecondTolerance);
            Assert.Equal(StandardFlowUnit.StandardCubicYardPerSecond, standardcubicyardpersecondQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            StandardFlow standardcubicmeterpersecond = StandardFlow.FromStandardCubicMetersPerSecond(1);
            AssertEx.EqualTolerance(1, StandardFlow.FromStandardCubicCentimetersPerMinute(standardcubicmeterpersecond.StandardCubicCentimetersPerMinute).StandardCubicMetersPerSecond, StandardCubicCentimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, StandardFlow.FromStandardCubicCentimetersPerSecond(standardcubicmeterpersecond.StandardCubicCentimetersPerSecond).StandardCubicMetersPerSecond, StandardCubicCentimetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, StandardFlow.FromStandardCubicDecimetersPerMinute(standardcubicmeterpersecond.StandardCubicDecimetersPerMinute).StandardCubicMetersPerSecond, StandardCubicDecimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, StandardFlow.FromStandardCubicFeetPerDay(standardcubicmeterpersecond.StandardCubicFeetPerDay).StandardCubicMetersPerSecond, StandardCubicFeetPerDayTolerance);
            AssertEx.EqualTolerance(1, StandardFlow.FromStandardCubicFeetPerHour(standardcubicmeterpersecond.StandardCubicFeetPerHour).StandardCubicMetersPerSecond, StandardCubicFeetPerHourTolerance);
            AssertEx.EqualTolerance(1, StandardFlow.FromStandardCubicFeetPerMinute(standardcubicmeterpersecond.StandardCubicFeetPerMinute).StandardCubicMetersPerSecond, StandardCubicFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(1, StandardFlow.FromStandardCubicFeetPerSecond(standardcubicmeterpersecond.StandardCubicFeetPerSecond).StandardCubicMetersPerSecond, StandardCubicFeetPerSecondTolerance);
            AssertEx.EqualTolerance(1, StandardFlow.FromStandardCubicMetersPerDay(standardcubicmeterpersecond.StandardCubicMetersPerDay).StandardCubicMetersPerSecond, StandardCubicMetersPerDayTolerance);
            AssertEx.EqualTolerance(1, StandardFlow.FromStandardCubicMetersPerHour(standardcubicmeterpersecond.StandardCubicMetersPerHour).StandardCubicMetersPerSecond, StandardCubicMetersPerHourTolerance);
            AssertEx.EqualTolerance(1, StandardFlow.FromStandardCubicMetersPerMinute(standardcubicmeterpersecond.StandardCubicMetersPerMinute).StandardCubicMetersPerSecond, StandardCubicMetersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, StandardFlow.FromStandardCubicMetersPerSecond(standardcubicmeterpersecond.StandardCubicMetersPerSecond).StandardCubicMetersPerSecond, StandardCubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, StandardFlow.FromStandardCubicMillimetersPerSecond(standardcubicmeterpersecond.StandardCubicMillimetersPerSecond).StandardCubicMetersPerSecond, StandardCubicMillimetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, StandardFlow.FromStandardCubicYardsPerDay(standardcubicmeterpersecond.StandardCubicYardsPerDay).StandardCubicMetersPerSecond, StandardCubicYardsPerDayTolerance);
            AssertEx.EqualTolerance(1, StandardFlow.FromStandardCubicYardsPerHour(standardcubicmeterpersecond.StandardCubicYardsPerHour).StandardCubicMetersPerSecond, StandardCubicYardsPerHourTolerance);
            AssertEx.EqualTolerance(1, StandardFlow.FromStandardCubicYardsPerMinute(standardcubicmeterpersecond.StandardCubicYardsPerMinute).StandardCubicMetersPerSecond, StandardCubicYardsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, StandardFlow.FromStandardCubicYardsPerSecond(standardcubicmeterpersecond.StandardCubicYardsPerSecond).StandardCubicMetersPerSecond, StandardCubicYardsPerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            StandardFlow v = StandardFlow.FromStandardCubicMetersPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.StandardCubicMetersPerSecond, StandardCubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, (StandardFlow.FromStandardCubicMetersPerSecond(3)-v).StandardCubicMetersPerSecond, StandardCubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).StandardCubicMetersPerSecond, StandardCubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).StandardCubicMetersPerSecond, StandardCubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).StandardCubicMetersPerSecond, StandardCubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, (StandardFlow.FromStandardCubicMetersPerSecond(10)/5).StandardCubicMetersPerSecond, StandardCubicMetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, StandardFlow.FromStandardCubicMetersPerSecond(10)/StandardFlow.FromStandardCubicMetersPerSecond(5), StandardCubicMetersPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            StandardFlow oneStandardCubicMeterPerSecond = StandardFlow.FromStandardCubicMetersPerSecond(1);
            StandardFlow twoStandardCubicMetersPerSecond = StandardFlow.FromStandardCubicMetersPerSecond(2);

            Assert.True(oneStandardCubicMeterPerSecond < twoStandardCubicMetersPerSecond);
            Assert.True(oneStandardCubicMeterPerSecond <= twoStandardCubicMetersPerSecond);
            Assert.True(twoStandardCubicMetersPerSecond > oneStandardCubicMeterPerSecond);
            Assert.True(twoStandardCubicMetersPerSecond >= oneStandardCubicMeterPerSecond);

            Assert.False(oneStandardCubicMeterPerSecond > twoStandardCubicMetersPerSecond);
            Assert.False(oneStandardCubicMeterPerSecond >= twoStandardCubicMetersPerSecond);
            Assert.False(twoStandardCubicMetersPerSecond < oneStandardCubicMeterPerSecond);
            Assert.False(twoStandardCubicMetersPerSecond <= oneStandardCubicMeterPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            StandardFlow standardcubicmeterpersecond = StandardFlow.FromStandardCubicMetersPerSecond(1);
            Assert.Equal(0, standardcubicmeterpersecond.CompareTo(standardcubicmeterpersecond));
            Assert.True(standardcubicmeterpersecond.CompareTo(StandardFlow.Zero) > 0);
            Assert.True(StandardFlow.Zero.CompareTo(standardcubicmeterpersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            StandardFlow standardcubicmeterpersecond = StandardFlow.FromStandardCubicMetersPerSecond(1);
            Assert.Throws<ArgumentException>(() => standardcubicmeterpersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            StandardFlow standardcubicmeterpersecond = StandardFlow.FromStandardCubicMetersPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => standardcubicmeterpersecond.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = StandardFlow.FromStandardCubicMetersPerSecond(1);
            var b = StandardFlow.FromStandardCubicMetersPerSecond(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = StandardFlow.FromStandardCubicMetersPerSecond(1);
            var b = StandardFlow.FromStandardCubicMetersPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = StandardFlow.FromStandardCubicMetersPerSecond(1);
            object b = StandardFlow.FromStandardCubicMetersPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = StandardFlow.FromStandardCubicMetersPerSecond(1);
            Assert.True(v.Equals(StandardFlow.FromStandardCubicMetersPerSecond(1), StandardCubicMetersPerSecondTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(StandardFlow.Zero, StandardCubicMetersPerSecondTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = StandardFlow.FromStandardCubicMetersPerSecond(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(StandardFlow.FromStandardCubicMetersPerSecond(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            StandardFlow standardcubicmeterpersecond = StandardFlow.FromStandardCubicMetersPerSecond(1);
            Assert.False(standardcubicmeterpersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            StandardFlow standardcubicmeterpersecond = StandardFlow.FromStandardCubicMetersPerSecond(1);
            Assert.False(standardcubicmeterpersecond.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(StandardFlowUnit.Undefined, StandardFlow.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(StandardFlowUnit)).Cast<StandardFlowUnit>();
            foreach(var unit in units)
            {
                if(unit == StandardFlowUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(StandardFlow.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 sccm", new StandardFlow(1, StandardFlowUnit.StandardCubicCentimeterPerMinute).ToString());
                Assert.Equal("1 sccs", new StandardFlow(1, StandardFlowUnit.StandardCubicCentimeterPerSecond).ToString());
                Assert.Equal("1 sdm³/min", new StandardFlow(1, StandardFlowUnit.StandardCubicDecimeterPerMinute).ToString());
                Assert.Equal("1 sft³/d", new StandardFlow(1, StandardFlowUnit.StandardCubicFootPerDay).ToString());
                Assert.Equal("1 sft³/h", new StandardFlow(1, StandardFlowUnit.StandardCubicFootPerHour).ToString());
                Assert.Equal("1 scfm", new StandardFlow(1, StandardFlowUnit.StandardCubicFootPerMinute).ToString());
                Assert.Equal("1 scfs", new StandardFlow(1, StandardFlowUnit.StandardCubicFootPerSecond).ToString());
                Assert.Equal("1 scmd", new StandardFlow(1, StandardFlowUnit.StandardCubicMeterPerDay).ToString());
                Assert.Equal("1 scmh", new StandardFlow(1, StandardFlowUnit.StandardCubicMeterPerHour).ToString());
                Assert.Equal("1 scmm", new StandardFlow(1, StandardFlowUnit.StandardCubicMeterPerMinute).ToString());
                Assert.Equal("1 scms", new StandardFlow(1, StandardFlowUnit.StandardCubicMeterPerSecond).ToString());
                Assert.Equal("1 smm³/s", new StandardFlow(1, StandardFlowUnit.StandardCubicMillimeterPerSecond).ToString());
                Assert.Equal("1 scy/day", new StandardFlow(1, StandardFlowUnit.StandardCubicYardPerDay).ToString());
                Assert.Equal("1 syd³/h", new StandardFlow(1, StandardFlowUnit.StandardCubicYardPerHour).ToString());
                Assert.Equal("1 syd³/min", new StandardFlow(1, StandardFlowUnit.StandardCubicYardPerMinute).ToString());
                Assert.Equal("1 syd³/s", new StandardFlow(1, StandardFlowUnit.StandardCubicYardPerSecond).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 sccm", new StandardFlow(1, StandardFlowUnit.StandardCubicCentimeterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 sccs", new StandardFlow(1, StandardFlowUnit.StandardCubicCentimeterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 sdm³/min", new StandardFlow(1, StandardFlowUnit.StandardCubicDecimeterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 sft³/d", new StandardFlow(1, StandardFlowUnit.StandardCubicFootPerDay).ToString(swedishCulture));
            Assert.Equal("1 sft³/h", new StandardFlow(1, StandardFlowUnit.StandardCubicFootPerHour).ToString(swedishCulture));
            Assert.Equal("1 scfm", new StandardFlow(1, StandardFlowUnit.StandardCubicFootPerMinute).ToString(swedishCulture));
            Assert.Equal("1 scfs", new StandardFlow(1, StandardFlowUnit.StandardCubicFootPerSecond).ToString(swedishCulture));
            Assert.Equal("1 scmd", new StandardFlow(1, StandardFlowUnit.StandardCubicMeterPerDay).ToString(swedishCulture));
            Assert.Equal("1 scmh", new StandardFlow(1, StandardFlowUnit.StandardCubicMeterPerHour).ToString(swedishCulture));
            Assert.Equal("1 scmm", new StandardFlow(1, StandardFlowUnit.StandardCubicMeterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 scms", new StandardFlow(1, StandardFlowUnit.StandardCubicMeterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 smm³/s", new StandardFlow(1, StandardFlowUnit.StandardCubicMillimeterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 scy/day", new StandardFlow(1, StandardFlowUnit.StandardCubicYardPerDay).ToString(swedishCulture));
            Assert.Equal("1 syd³/h", new StandardFlow(1, StandardFlowUnit.StandardCubicYardPerHour).ToString(swedishCulture));
            Assert.Equal("1 syd³/min", new StandardFlow(1, StandardFlowUnit.StandardCubicYardPerMinute).ToString(swedishCulture));
            Assert.Equal("1 syd³/s", new StandardFlow(1, StandardFlowUnit.StandardCubicYardPerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 scms", new StandardFlow(0.123456, StandardFlowUnit.StandardCubicMeterPerSecond).ToString("s1"));
                Assert.Equal("0.12 scms", new StandardFlow(0.123456, StandardFlowUnit.StandardCubicMeterPerSecond).ToString("s2"));
                Assert.Equal("0.123 scms", new StandardFlow(0.123456, StandardFlowUnit.StandardCubicMeterPerSecond).ToString("s3"));
                Assert.Equal("0.1235 scms", new StandardFlow(0.123456, StandardFlowUnit.StandardCubicMeterPerSecond).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 scms", new StandardFlow(0.123456, StandardFlowUnit.StandardCubicMeterPerSecond).ToString("s1", culture));
            Assert.Equal("0.12 scms", new StandardFlow(0.123456, StandardFlowUnit.StandardCubicMeterPerSecond).ToString("s2", culture));
            Assert.Equal("0.123 scms", new StandardFlow(0.123456, StandardFlowUnit.StandardCubicMeterPerSecond).ToString("s3", culture));
            Assert.Equal("0.1235 scms", new StandardFlow(0.123456, StandardFlowUnit.StandardCubicMeterPerSecond).ToString("s4", culture));
        }

        #pragma warning disable 612, 618

        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }

        #pragma warning restore 612, 618

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(StandardFlow)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(StandardFlowUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal(QuantityType.StandardFlow, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal(StandardFlow.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(1.0);
            Assert.Equal(new {StandardFlow.QuantityType, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = StandardFlow.FromStandardCubicMetersPerSecond(value);
            Assert.Equal(StandardFlow.FromStandardCubicMetersPerSecond(-value), -quantity);
        }

    }
}
