# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master
  - feature/*

pool:
  name: 'Agileo'

variables:
  dotnetSdkVersion: '2.2.x'
  nugetToolVersion: '5.x'
  includeWindowsRuntimeComponent: false
  buildConfiguration: 'Release'

steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
    inputs:
      packageType: 'sdk'
      version: '$(dotnetSdkVersion)'

  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet tool $(nugetToolVersion)'
    inputs:
      versionSpec: '$(nugetToolVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Generate code'
    inputs:
      command: 'run'
      projects: 'CodeGen/CodeGen.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'Build UnitsNet solution'
    inputs:
      command: 'build'
      projects: 'UnitsNet.sln'
      arguments: '--configuration $(buildConfiguration)'

  - task: MSBuild@1
    displayName: 'Restore WindowsRuntimeComponent dependencies'
    inputs:
      solution: 'UnitsNet.WindowsRuntimeComponent.sln'
      configuration: '$(buildConfiguration)'
      msbuildArguments: '-t:restore'
    condition: and(succeeded(), eq(variables['includeWindowsRuntimeComponent'], 'true'))

  - task: MSBuild@1
    displayName: 'Build WindowsRuntimeComponent solution'
    inputs:
      solution: 'UnitsNet.WindowsRuntimeComponent.sln'
      configuration: '$(buildConfiguration)'
    condition: and(succeeded(), eq(variables['includeWindowsRuntimeComponent'], 'true'))

  - script: |
      dotcover cover --TargetExecutable="$(Agent.ToolsDirectory)/dotnet/dotnet.exe" --Filters="+:module=UnitsNet*;-:module=*Tests" --Output="$(Build.SourcesDirectory)/Artifacts/Coverage/UnitsNet.Tests.coverage.xml" --ReportType=DetailedXML --TargetArguments="test --no-build --logger trx $(Build.SourcesDirectory)/UnitsNet.Tests/UnitsNet.Tests.csproj"
    displayName: 'UnitsNet.Tests code coverage'

  - script: |
      dotcover cover --TargetExecutable="$(Agent.ToolsDirectory)/dotnet/dotnet.exe" --Filters="+:module=UnitsNet*;-:module=*Tests" --Output="$(Build.SourcesDirectory)/Artifacts/Coverage/UnitsNet.Serialization.JsonNet.Tests.coverage.xml" --ReportType=DetailedXML --TargetArguments="test --no-build --logger trx $(Build.SourcesDirectory)/UnitsNet.Serialization.JsonNet.Tests/UnitsNet.Serialization.JsonNet.Tests.csproj"
    displayName: 'UnitsNet.Serialization.JsonNet.Tests code coverage'

  - script: |
      dotcover cover --TargetExecutable="$(Agent.ToolsDirectory)/dotnet/dotnet.exe" --Filters="+:module=UnitsNet*;-:module=*Tests" --Output="$(Build.SourcesDirectory)/Artifacts/Coverage/UnitsNet.Serialization.JsonNet.CompatibilityTests.coverage.xml" --ReportType=DetailedXML --TargetArguments="test --no-build --logger trx $(Build.SourcesDirectory)/UnitsNet.Serialization.JsonNet.CompatibilityTests/UnitsNet.Serialization.JsonNet.CompatibilityTests.csproj"
    displayName: 'UnitsNet.Serialization.JsonNet.CompatibilityTests code coverage'

  - task: PublishTestResults@2
    displayName: 'Publish test results'
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'

  - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
    displayName: 'Generate code coverage report'
    inputs:
      reports: '$(Build.SourcesDirectory)/Artifacts/Coverage/*.coverage.xml'
      targetdir: '$(Build.SourcesDirectory)/Artifacts/Coverage/Report'
      reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/Artifacts/Coverage/Report/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/Artifacts/Coverage/Report'

  - task: WhiteSource Bolt@19
    displayName: 'Run WhiteSource Bolt'

  - publish: $(Build.SourcesDirectory)/Artifacts
    displayName: 'Publish Artifacts'
    artifact: 'drop'
    condition: succeeded()
