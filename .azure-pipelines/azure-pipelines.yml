# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master
  - feature/*

pool:
  name: 'Agileo'

variables:
  dotnetSdkVersion: '2.2.108'
  nugetToolVersion: '5.x'
  includeWindowsRuntimeComponent: false
  buildConfiguration: 'Release'

steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
    inputs:
      packageType: 'sdk'
      version: '$(dotnetSdkVersion)'

  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet tool $(nugetToolVersion)'
    inputs:
      versionSpec: '$(nugetToolVersion)'

  - task: DotNetCoreCLI@2
    displayName: 'Generate code'
    inputs:
      command: 'run'
      projects: 'CodeGen/CodeGen.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'Build UnitsNet solution'
    inputs:
      command: 'build'
      projects: 'UnitsNet.sln'
      arguments: '--configuration $(buildConfiguration)'

  - task: MSBuild@1
    displayName: 'Restore WindowsRuntimeComponent dependencies'
    inputs:
      solution: 'UnitsNet.WindowsRuntimeComponent.sln'
      configuration: '$(buildConfiguration)'
      msbuildArguments: '-t:restore'
    condition: and(succeeded(), eq(variables['includeWindowsRuntimeComponent'], 'true'))

  - task: MSBuild@1
    displayName: 'Build WindowsRuntimeComponent solution'
    inputs:
      solution: 'UnitsNet.WindowsRuntimeComponent.sln'
      configuration: '$(buildConfiguration)'
    condition: and(succeeded(), eq(variables['includeWindowsRuntimeComponent'], 'true'))

  - task: DotNetCoreCLI@2
    displayName: 'Generate code coverage'
    inputs:
      command: 'test'
      projects: '**/*Tests/*.csproj'
      arguments: '--configuration $(buildConfiguration) --collect "Code coverage" --settings $(System.DefaultWorkingDirectory)/CodeCoverage.runsettings'
      nobuild: true
