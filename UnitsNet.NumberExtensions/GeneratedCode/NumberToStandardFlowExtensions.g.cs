//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToStandardFlow
{
    /// <summary>
    /// A number to StandardFlow Extensions
    /// </summary>
    public static class NumberToStandardFlowExtensions
    {
        /// <inheritdoc cref="StandardFlow.FromStandardCubicCentimetersPerMinute(UnitsNet.QuantityValue)" />
        public static StandardFlow StandardCubicCentimetersPerMinute<T>(this T value) =>
            StandardFlow.FromStandardCubicCentimetersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="StandardFlow.FromStandardCubicCentimetersPerSecond(UnitsNet.QuantityValue)" />
        public static StandardFlow StandardCubicCentimetersPerSecond<T>(this T value) =>
            StandardFlow.FromStandardCubicCentimetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="StandardFlow.FromStandardCubicDecimetersPerMinute(UnitsNet.QuantityValue)" />
        public static StandardFlow StandardCubicDecimetersPerMinute<T>(this T value) =>
            StandardFlow.FromStandardCubicDecimetersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="StandardFlow.FromStandardCubicFeetPerDay(UnitsNet.QuantityValue)" />
        public static StandardFlow StandardCubicFeetPerDay<T>(this T value) =>
            StandardFlow.FromStandardCubicFeetPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="StandardFlow.FromStandardCubicFeetPerHour(UnitsNet.QuantityValue)" />
        public static StandardFlow StandardCubicFeetPerHour<T>(this T value) =>
            StandardFlow.FromStandardCubicFeetPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="StandardFlow.FromStandardCubicFeetPerMinute(UnitsNet.QuantityValue)" />
        public static StandardFlow StandardCubicFeetPerMinute<T>(this T value) =>
            StandardFlow.FromStandardCubicFeetPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="StandardFlow.FromStandardCubicFeetPerSecond(UnitsNet.QuantityValue)" />
        public static StandardFlow StandardCubicFeetPerSecond<T>(this T value) =>
            StandardFlow.FromStandardCubicFeetPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="StandardFlow.FromStandardCubicMetersPerDay(UnitsNet.QuantityValue)" />
        public static StandardFlow StandardCubicMetersPerDay<T>(this T value) =>
            StandardFlow.FromStandardCubicMetersPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="StandardFlow.FromStandardCubicMetersPerHour(UnitsNet.QuantityValue)" />
        public static StandardFlow StandardCubicMetersPerHour<T>(this T value) =>
            StandardFlow.FromStandardCubicMetersPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="StandardFlow.FromStandardCubicMetersPerMinute(UnitsNet.QuantityValue)" />
        public static StandardFlow StandardCubicMetersPerMinute<T>(this T value) =>
            StandardFlow.FromStandardCubicMetersPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="StandardFlow.FromStandardCubicMetersPerSecond(UnitsNet.QuantityValue)" />
        public static StandardFlow StandardCubicMetersPerSecond<T>(this T value) =>
            StandardFlow.FromStandardCubicMetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="StandardFlow.FromStandardCubicMillimetersPerSecond(UnitsNet.QuantityValue)" />
        public static StandardFlow StandardCubicMillimetersPerSecond<T>(this T value) =>
            StandardFlow.FromStandardCubicMillimetersPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="StandardFlow.FromStandardCubicYardsPerDay(UnitsNet.QuantityValue)" />
        public static StandardFlow StandardCubicYardsPerDay<T>(this T value) =>
            StandardFlow.FromStandardCubicYardsPerDay(Convert.ToDouble(value));

        /// <inheritdoc cref="StandardFlow.FromStandardCubicYardsPerHour(UnitsNet.QuantityValue)" />
        public static StandardFlow StandardCubicYardsPerHour<T>(this T value) =>
            StandardFlow.FromStandardCubicYardsPerHour(Convert.ToDouble(value));

        /// <inheritdoc cref="StandardFlow.FromStandardCubicYardsPerMinute(UnitsNet.QuantityValue)" />
        public static StandardFlow StandardCubicYardsPerMinute<T>(this T value) =>
            StandardFlow.FromStandardCubicYardsPerMinute(Convert.ToDouble(value));

        /// <inheritdoc cref="StandardFlow.FromStandardCubicYardsPerSecond(UnitsNet.QuantityValue)" />
        public static StandardFlow StandardCubicYardsPerSecond<T>(this T value) =>
            StandardFlow.FromStandardCubicYardsPerSecond(Convert.ToDouble(value));

    }
}
