//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In physics and engineering, in particular fluid dynamics and hydrometry, the volumetric flow rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time. The SI unit is m³/s (cubic meters per second). In US Customary Units and British Imperial Units, volumetric flow rate is often expressed as ft³/s (cubic feet per second). It is usually represented by the symbol Q.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class StandardFlow : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly StandardFlowUnit? _unit;

        static StandardFlow()
        {
            BaseDimensions = new BaseDimensions(3, 0, -1, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.StandardFlow, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit StandardCubicMeterPerSecond.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public StandardFlow()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private StandardFlow(double value, StandardFlowUnit unit)
        {
            if(unit == StandardFlowUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = value;
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of StandardFlow, which is StandardCubicMeterPerSecond. All conversions go via this value.
        /// </summary>
        public static StandardFlowUnit BaseUnit { get; } = StandardFlowUnit.StandardCubicMeterPerSecond;

        /// <summary>
        /// Represents the largest possible value of StandardFlow
        /// </summary>
        public static StandardFlow MaxValue { get; } = new StandardFlow(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of StandardFlow
        /// </summary>
        public static StandardFlow MinValue { get; } = new StandardFlow(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.StandardFlow;

        /// <summary>
        ///     All units of measurement for the StandardFlow quantity.
        /// </summary>
        public static StandardFlowUnit[] Units { get; } = Enum.GetValues(typeof(StandardFlowUnit)).Cast<StandardFlowUnit>().Except(new StandardFlowUnit[]{ StandardFlowUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit StandardCubicMeterPerSecond.
        /// </summary>
        public static StandardFlow Zero { get; } = new StandardFlow(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public StandardFlowUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => StandardFlow.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => StandardFlow.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get StandardFlow in StandardCubicCentimetersPerMinute.
        /// </summary>
        public double StandardCubicCentimetersPerMinute => As(StandardFlowUnit.StandardCubicCentimeterPerMinute);

        /// <summary>
        ///     Get StandardFlow in StandardCubicCentimetersPerSecond.
        /// </summary>
        public double StandardCubicCentimetersPerSecond => As(StandardFlowUnit.StandardCubicCentimeterPerSecond);

        /// <summary>
        ///     Get StandardFlow in StandardCubicDecimetersPerMinute.
        /// </summary>
        public double StandardCubicDecimetersPerMinute => As(StandardFlowUnit.StandardCubicDecimeterPerMinute);

        /// <summary>
        ///     Get StandardFlow in StandardCubicFeetPerDay.
        /// </summary>
        public double StandardCubicFeetPerDay => As(StandardFlowUnit.StandardCubicFootPerDay);

        /// <summary>
        ///     Get StandardFlow in StandardCubicFeetPerHour.
        /// </summary>
        public double StandardCubicFeetPerHour => As(StandardFlowUnit.StandardCubicFootPerHour);

        /// <summary>
        ///     Get StandardFlow in StandardCubicFeetPerMinute.
        /// </summary>
        public double StandardCubicFeetPerMinute => As(StandardFlowUnit.StandardCubicFootPerMinute);

        /// <summary>
        ///     Get StandardFlow in StandardCubicFeetPerSecond.
        /// </summary>
        public double StandardCubicFeetPerSecond => As(StandardFlowUnit.StandardCubicFootPerSecond);

        /// <summary>
        ///     Get StandardFlow in StandardCubicMetersPerDay.
        /// </summary>
        public double StandardCubicMetersPerDay => As(StandardFlowUnit.StandardCubicMeterPerDay);

        /// <summary>
        ///     Get StandardFlow in StandardCubicMetersPerHour.
        /// </summary>
        public double StandardCubicMetersPerHour => As(StandardFlowUnit.StandardCubicMeterPerHour);

        /// <summary>
        ///     Get StandardFlow in StandardCubicMetersPerMinute.
        /// </summary>
        public double StandardCubicMetersPerMinute => As(StandardFlowUnit.StandardCubicMeterPerMinute);

        /// <summary>
        ///     Get StandardFlow in StandardCubicMetersPerSecond.
        /// </summary>
        public double StandardCubicMetersPerSecond => As(StandardFlowUnit.StandardCubicMeterPerSecond);

        /// <summary>
        ///     Get StandardFlow in StandardCubicMillimetersPerSecond.
        /// </summary>
        public double StandardCubicMillimetersPerSecond => As(StandardFlowUnit.StandardCubicMillimeterPerSecond);

        /// <summary>
        ///     Get StandardFlow in StandardCubicYardsPerDay.
        /// </summary>
        public double StandardCubicYardsPerDay => As(StandardFlowUnit.StandardCubicYardPerDay);

        /// <summary>
        ///     Get StandardFlow in StandardCubicYardsPerHour.
        /// </summary>
        public double StandardCubicYardsPerHour => As(StandardFlowUnit.StandardCubicYardPerHour);

        /// <summary>
        ///     Get StandardFlow in StandardCubicYardsPerMinute.
        /// </summary>
        public double StandardCubicYardsPerMinute => As(StandardFlowUnit.StandardCubicYardPerMinute);

        /// <summary>
        ///     Get StandardFlow in StandardCubicYardsPerSecond.
        /// </summary>
        public double StandardCubicYardsPerSecond => As(StandardFlowUnit.StandardCubicYardPerSecond);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(StandardFlowUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(StandardFlowUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get StandardFlow from StandardCubicCentimetersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static StandardFlow FromStandardCubicCentimetersPerMinute(double standardcubiccentimetersperminute)
        {
            double value = (double) standardcubiccentimetersperminute;
            return new StandardFlow(value, StandardFlowUnit.StandardCubicCentimeterPerMinute);
        }
        /// <summary>
        ///     Get StandardFlow from StandardCubicCentimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static StandardFlow FromStandardCubicCentimetersPerSecond(double standardcubiccentimeterspersecond)
        {
            double value = (double) standardcubiccentimeterspersecond;
            return new StandardFlow(value, StandardFlowUnit.StandardCubicCentimeterPerSecond);
        }
        /// <summary>
        ///     Get StandardFlow from StandardCubicDecimetersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static StandardFlow FromStandardCubicDecimetersPerMinute(double standardcubicdecimetersperminute)
        {
            double value = (double) standardcubicdecimetersperminute;
            return new StandardFlow(value, StandardFlowUnit.StandardCubicDecimeterPerMinute);
        }
        /// <summary>
        ///     Get StandardFlow from StandardCubicFeetPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static StandardFlow FromStandardCubicFeetPerDay(double standardcubicfeetperday)
        {
            double value = (double) standardcubicfeetperday;
            return new StandardFlow(value, StandardFlowUnit.StandardCubicFootPerDay);
        }
        /// <summary>
        ///     Get StandardFlow from StandardCubicFeetPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static StandardFlow FromStandardCubicFeetPerHour(double standardcubicfeetperhour)
        {
            double value = (double) standardcubicfeetperhour;
            return new StandardFlow(value, StandardFlowUnit.StandardCubicFootPerHour);
        }
        /// <summary>
        ///     Get StandardFlow from StandardCubicFeetPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static StandardFlow FromStandardCubicFeetPerMinute(double standardcubicfeetperminute)
        {
            double value = (double) standardcubicfeetperminute;
            return new StandardFlow(value, StandardFlowUnit.StandardCubicFootPerMinute);
        }
        /// <summary>
        ///     Get StandardFlow from StandardCubicFeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static StandardFlow FromStandardCubicFeetPerSecond(double standardcubicfeetpersecond)
        {
            double value = (double) standardcubicfeetpersecond;
            return new StandardFlow(value, StandardFlowUnit.StandardCubicFootPerSecond);
        }
        /// <summary>
        ///     Get StandardFlow from StandardCubicMetersPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static StandardFlow FromStandardCubicMetersPerDay(double standardcubicmetersperday)
        {
            double value = (double) standardcubicmetersperday;
            return new StandardFlow(value, StandardFlowUnit.StandardCubicMeterPerDay);
        }
        /// <summary>
        ///     Get StandardFlow from StandardCubicMetersPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static StandardFlow FromStandardCubicMetersPerHour(double standardcubicmetersperhour)
        {
            double value = (double) standardcubicmetersperhour;
            return new StandardFlow(value, StandardFlowUnit.StandardCubicMeterPerHour);
        }
        /// <summary>
        ///     Get StandardFlow from StandardCubicMetersPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static StandardFlow FromStandardCubicMetersPerMinute(double standardcubicmetersperminute)
        {
            double value = (double) standardcubicmetersperminute;
            return new StandardFlow(value, StandardFlowUnit.StandardCubicMeterPerMinute);
        }
        /// <summary>
        ///     Get StandardFlow from StandardCubicMetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static StandardFlow FromStandardCubicMetersPerSecond(double standardcubicmeterspersecond)
        {
            double value = (double) standardcubicmeterspersecond;
            return new StandardFlow(value, StandardFlowUnit.StandardCubicMeterPerSecond);
        }
        /// <summary>
        ///     Get StandardFlow from StandardCubicMillimetersPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static StandardFlow FromStandardCubicMillimetersPerSecond(double standardcubicmillimeterspersecond)
        {
            double value = (double) standardcubicmillimeterspersecond;
            return new StandardFlow(value, StandardFlowUnit.StandardCubicMillimeterPerSecond);
        }
        /// <summary>
        ///     Get StandardFlow from StandardCubicYardsPerDay.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static StandardFlow FromStandardCubicYardsPerDay(double standardcubicyardsperday)
        {
            double value = (double) standardcubicyardsperday;
            return new StandardFlow(value, StandardFlowUnit.StandardCubicYardPerDay);
        }
        /// <summary>
        ///     Get StandardFlow from StandardCubicYardsPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static StandardFlow FromStandardCubicYardsPerHour(double standardcubicyardsperhour)
        {
            double value = (double) standardcubicyardsperhour;
            return new StandardFlow(value, StandardFlowUnit.StandardCubicYardPerHour);
        }
        /// <summary>
        ///     Get StandardFlow from StandardCubicYardsPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static StandardFlow FromStandardCubicYardsPerMinute(double standardcubicyardsperminute)
        {
            double value = (double) standardcubicyardsperminute;
            return new StandardFlow(value, StandardFlowUnit.StandardCubicYardPerMinute);
        }
        /// <summary>
        ///     Get StandardFlow from StandardCubicYardsPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static StandardFlow FromStandardCubicYardsPerSecond(double standardcubicyardspersecond)
        {
            double value = (double) standardcubicyardspersecond;
            return new StandardFlow(value, StandardFlowUnit.StandardCubicYardPerSecond);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="StandardFlowUnit" /> to <see cref="StandardFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>StandardFlow unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static StandardFlow From(double value, StandardFlowUnit fromUnit)
        {
            return new StandardFlow((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static StandardFlow Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static StandardFlow Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<StandardFlow, StandardFlowUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out StandardFlow result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out StandardFlow result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<StandardFlow, StandardFlowUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static StandardFlowUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static StandardFlowUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<StandardFlowUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out StandardFlowUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out StandardFlowUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<StandardFlowUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is StandardFlow objStandardFlow)) throw new ArgumentException("Expected type StandardFlow.", nameof(obj));

            return CompareTo(objStandardFlow);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(StandardFlow other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is StandardFlow objStandardFlow))
                return false;

            return Equals(objStandardFlow);
        }

        public bool Equals(StandardFlow other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another StandardFlow within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(StandardFlow other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current StandardFlow.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((StandardFlowUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(StandardFlowUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this StandardFlow to another StandardFlow with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A StandardFlow with the specified unit.</returns>
        public StandardFlow ToUnit(StandardFlowUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new StandardFlow(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case StandardFlowUnit.StandardCubicCentimeterPerMinute: return _value/6e7;
                case StandardFlowUnit.StandardCubicCentimeterPerSecond: return _value*1e-6;
                case StandardFlowUnit.StandardCubicDecimeterPerMinute: return _value/60000.00000;
                case StandardFlowUnit.StandardCubicFootPerDay: return _value*3.2774127999999619727840035909948e-7;
                case StandardFlowUnit.StandardCubicFootPerHour: return _value*7.8657907199999087346816086183876e-6;
                case StandardFlowUnit.StandardCubicFootPerMinute: return _value/2118.88000326;
                case StandardFlowUnit.StandardCubicFootPerSecond: return _value/35.314666721;
                case StandardFlowUnit.StandardCubicMeterPerDay: return _value/86400;
                case StandardFlowUnit.StandardCubicMeterPerHour: return _value/3600;
                case StandardFlowUnit.StandardCubicMeterPerMinute: return _value/60;
                case StandardFlowUnit.StandardCubicMeterPerSecond: return _value;
                case StandardFlowUnit.StandardCubicMillimeterPerSecond: return _value*1e-9;
                case StandardFlowUnit.StandardCubicYardPerDay: return _value/113007;
                case StandardFlowUnit.StandardCubicYardPerHour: return _value*2.1237634944E-4;
                case StandardFlowUnit.StandardCubicYardPerMinute: return _value*0.0127425809664;
                case StandardFlowUnit.StandardCubicYardPerSecond: return _value*0.764554857984;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(StandardFlowUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case StandardFlowUnit.StandardCubicCentimeterPerMinute: return baseUnitValue*6e7;
                case StandardFlowUnit.StandardCubicCentimeterPerSecond: return baseUnitValue/1e-6;
                case StandardFlowUnit.StandardCubicDecimeterPerMinute: return baseUnitValue*60000.00000;
                case StandardFlowUnit.StandardCubicFootPerDay: return baseUnitValue/3.2774127999999619727840035909948e-7;
                case StandardFlowUnit.StandardCubicFootPerHour: return baseUnitValue/7.8657907199999087346816086183876e-6;
                case StandardFlowUnit.StandardCubicFootPerMinute: return baseUnitValue*2118.88000326;
                case StandardFlowUnit.StandardCubicFootPerSecond: return baseUnitValue*35.314666721;
                case StandardFlowUnit.StandardCubicMeterPerDay: return baseUnitValue*86400;
                case StandardFlowUnit.StandardCubicMeterPerHour: return baseUnitValue*3600;
                case StandardFlowUnit.StandardCubicMeterPerMinute: return baseUnitValue*60;
                case StandardFlowUnit.StandardCubicMeterPerSecond: return baseUnitValue;
                case StandardFlowUnit.StandardCubicMillimeterPerSecond: return baseUnitValue/1e-9;
                case StandardFlowUnit.StandardCubicYardPerDay: return baseUnitValue*113007;
                case StandardFlowUnit.StandardCubicYardPerHour: return baseUnitValue/2.1237634944E-4;
                case StandardFlowUnit.StandardCubicYardPerMinute: return baseUnitValue/0.0127425809664;
                case StandardFlowUnit.StandardCubicYardPerSecond: return baseUnitValue/0.764554857984;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
